{"version":3,"sources":["Styles/Styles.tsx","Entity/CommonToken.tsx","VisualComponents/CommonKeyboard.tsx","Entity/BaseType.tsx","Entity/ReturnedEntity.tsx","Utils/Utils.tsx","EvRules/CommonEvRules.tsx","Pages/CommonPage.tsx","Entity/STLCToken.tsx","VisualComponents/VarTypeDialog.tsx","VisualComponents/TableVariables.tsx","VisualComponents/STLCKeyboard.tsx","Entity/Named.tsx","EvRules/STLCEvRules.tsx","Pages/STLCPage.tsx","Pages/MainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","menuButtonSelected","background","border","color","boxShadow","title","formControl","margin","spacing","minWidth","select","menuItem","selectedTextColor","inputDiv","inputInvisible","display","bgGreyHead","red","black","factoryCommonToken","type","tokenType","CommonKeyboard","props","expression","setExpression","handleChange","token","ButtonGroup","aria-label","Button","style","width","onClick","event","disabled","factoryBaseType","BaseTypeArrToLatexString","types","onError","length","undefined","map","elem","join","factoryReturnedEntity","str","getNextVar","bracketsChecker","arr","counter","i","getIndexOfSecondToken","flag","index","String","fromCharCode","analyzeExpression","t","expressionType","isInner","isTNBL","tTrue","tFalse","tPred","tSucc","tIszero","tZero","ifThenElse","tBra","resT","slice","getExpressionStringValue","iThen","iElse","ifClause","thenClause","elseClause","iIf","innerIfStr","innerThenStr","innerElseStr","isCorrect","push","shift","newArr","innerExpression","concat","ifValue","thenValue","elseValue","left","right","splice","result","res","CommonPage","infoHandler","errorHandler","useState","evaluatedExpression","setEvaluatedExpression","formula","setFormula","useEffect","clear","height","FormControl","Paper","elevation","math","errorColor","renderError","error","name","exprType","getExpressionType","factorySTLCToken","varName","varType","varAbstracted","gammaType","VarTypeDialog","dialogVisability","setDialogVisability","setSelectedVarTypeValue","Dialog","onClose","aria-labelledby","open","disableBackdropClick","disableEscapeKeyDown","DialogTitle","id","List","ListItem","button","key","ListItemText","primary","columns","label","container","maxHeight","TableVariables","data","classes","TableContainer","className","Table","stickyHeader","size","TableHead","TableRow","column","TableCell","align","TableBody","row","hover","role","tabIndex","PaperComponent","handle","cancel","STLCKeyboard","setT","setVars","enabled","varGenerator","vars","React","setOpen","localT","setLocalT","localVars","setLocalVars","selectedVarTypeValue","handleClose","handleClear","newVar","next","value","newVarToken","variant","cursor","DialogContent","textAlign","isDisabled","varCombobox","DialogActions","autoFocus","isF","Select","labelId","onChange","newValue","find","target","e","MenuItem","toNamed","t1","t2","fType","isTAbsRule","tAbs","tApp","tVar","tF","resT2","resT1","expressionStringValue","elemT1","findFirstUnAbsVar","elemT2","absAllVars","JSON","stringify","arrays","arrayOfVars","part1","part2","forEach","lbPosition","STLCPage","errorMessages","setFType","setExprType","setT1","setT2","fCmbEnabled","setFCmdEnabled","fOtions","typeOtions","alignItems","justifyContent","InputLabel","htmlFor","TextField","exprTypeBuilder","isAnalizeBtnDisabled","copyArrayOfTokens","expressionCopy","MainPage","infoMessages","setInfoMessages","setErrorMessages","useCallback","message","prevState","handleCloseInfo","handleCloseError","view","setView","handleChangeView","AppBar","position","Toolbar","Grid","direction","justify","item","getView","aria-describedby","DialogContentText","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.98f61a91.chunk.js","sourcesContent":["import { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\n/**\r\n * Function that provides styles for visual components.\r\n * \r\n * @param theme - `Theme` object.\r\n * \r\n * @returns object of different visual components styles.\r\n */\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1\r\n        },\r\n        menuButton: {\r\n        },\r\n        menuButtonSelected: {\r\n            background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n            border: 0,\r\n            color: 'white',\r\n            boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        select: {\r\n            color: \"inherit\"\r\n        },\r\n        menuItem: {\r\n            selectedTextColor: 'white',\r\n        },\r\n        inputDiv: {\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n        inputInvisible: {\r\n            display: 'none',\r\n        },\r\n        bgGreyHead: {\r\n            background: \"#cccccc\",\r\n        },\r\n    })\r\n);\r\n\r\n/**\r\n * Constant that represents red color.\r\n */\r\nexport const red = \"\\\\color{#ff0000}\";\r\n\r\n/**\r\n * Constant that represents black color.\r\n */\r\nexport const black = \"\\\\color{#000000}\";","/**\r\n * `CommonToken` interface.\r\n * \r\n * @property tokenType - defines common token.\r\n */\r\nexport interface CommonToken {\r\n    tokenType: true | false | \"pred\" | \"succ\" | \"iszero\" | 0 | \"if\" | \"then\" | \"else\" | \"(\" | \")\" | \"Nat\" | \"Bool\"\r\n}\r\n\r\n/**\r\n * Factory of `CommonToken` object.\r\n * \r\n * @param type - type of token. Possible types options: `true` or `false` or `pred` or `succ` or `iszero` or `0` or `if` or `then` or `else` or `(` or `)` or `Nat` or `Bool`\r\n * \r\n * @returns `CommonToken` object.\r\n */\r\nexport const factoryCommonToken = (\r\n    type: true | false | \"pred\" | \"succ\" | \"iszero\" | 0 | \"if\" | \"then\" | \"else\" | \"(\" | \")\" | \"Nat\" | \"Bool\"\r\n): CommonToken => ({\r\n    tokenType: type\r\n});\r\n\r\n/**\r\n * Constant that represents `latex` tourniquet.\r\n */\r\nexport const VDASH = \" \\\\vdash \";","import React from 'react';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport { CommonToken, factoryCommonToken } from '../Entity/CommonToken';\r\nimport 'katex/dist/katex.min.css';\r\n\r\n/**\r\n * `KeyboardProps` - keyboard's properties.\r\n * \r\n * @property expression - array of `CommonToken` objects that represents entered expression.\r\n * @property setExpression - setter for expression of `React.Dispatch<React.SetStateAction<CommonToken[]>>` type.\r\n */\r\nexport interface KeyboardProps {\r\n    expression: CommonToken[];\r\n    setExpression: React.Dispatch<React.SetStateAction<CommonToken[]>>;\r\n}\r\n\r\n/**\r\n * Graphical user interface component that represents common virtual keyboard for interactive with user.\r\n * \r\n * @properties `props`- properties of `KeyboardProps`.\r\n *\r\n * @returns `JSX.Element` that represents virtual keyboard.\r\n */\r\nconst CommonKeyboard: React.FC<KeyboardProps> = props => {\r\n\r\n    const { expression, setExpression } = props;\r\n\r\n    const handleChange = (token: CommonToken): void => {\r\n        setExpression([...expression, token]);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(true)) }}>{\"TRUE\"}</Button>\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(false)) }}>{\"FALSE\"}</Button>\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(\"succ\")) }}>{\"SUCC\"}</Button>\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(\"pred\")) }}>{\"PRED\"}</Button>\r\n            </ButtonGroup>\r\n            <br />\r\n            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(\"if\")) }}>{\"IF\"}</Button>\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(\"then\")) }}>{\"THEN\"}</Button>\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(\"else\")) }}>{\"ELSE\"}</Button>\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(\"iszero\")) }}>{\"ISZERO\"}</Button>\r\n            </ButtonGroup>\r\n            <br />\r\n            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(0)) }}>{\"0\"}</Button>\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(\"(\")) }}>{\"(\"}</Button>\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(\")\")) }}>{\")\"}</Button>\r\n                <Button disabled={true} style={{ width: '110px' }}>{\"\"}</Button>\r\n            </ButtonGroup>\r\n            <br />\r\n            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(\"Nat\")) }}>{\":Nat\"}</Button>\r\n                <Button style={{ width: '110px' }} onClick={(event) => { handleChange(factoryCommonToken(\"Bool\")) }}>{\":Bool\"}</Button>\r\n                <Button disabled={true} style={{ width: '110px' }}>{\"\"}</Button>\r\n                <Button disabled={true} style={{ width: '110px' }}>{\"\"}</Button>\r\n            </ButtonGroup>           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CommonKeyboard;","/**\r\n * `BaseType` interface.\r\n * \r\n * @property type - token's or expression's base type.\r\n */\r\nexport interface BaseType {\r\n    type: \"Nat\" | \"Bool\";\r\n}\r\n\r\n/**\r\n * Factory of `BaseType` object.\r\n * \r\n * @param type - `Nat` or `Bool` type of `BaseType` object.\r\n * \r\n * @returns `BaseType` object.\r\n */\r\nexport const factoryBaseType = (\r\n    type: \"Nat\" | \"Bool\"\r\n): BaseType => ({\r\n    type: type\r\n});\r\n\r\n/**\r\n * Function provides `latex` string representation of array of `BaseType` objects.\r\n * \r\n * @param types - array of `BaseType` objects.\r\n * @param onError - callback function of `(message: string) => void` type for display error message.\r\n * \r\n * @returns `latex` string representation of array of `BaseType` objects.\r\n */\r\nexport const BaseTypeArrToLatexString = (types: BaseType[], onError: (message: string) => void): string => {\r\n    if (types && types.length > 0 && types[0] !== undefined)\r\n        return types.map(elem => { return elem.type }).join(\" \\\\to \");\r\n\r\n    onError(\"Expression error\");\r\n    return \"ERROR\";\r\n}","import { BaseType } from \"./BaseType\";\r\n\r\n/**\r\n * `ReturnedEntity` interface.\r\n * \r\n * @property str - represents `latex` string.\r\n * @property type - represents evaluated type of expression.\r\n */\r\nexport interface ReturnedEntity {\r\n    str: string;\r\n    type: BaseType[];\r\n}\r\n\r\n/**\r\n * Factory of `ReturnedEntity` object.\r\n * \r\n * @property str - represents `latex` string.\r\n * @property type - represents evaluated type of expression. \r\n * \r\n * @returns `ReturnedEntity` object.\r\n */\r\nexport const factoryReturnedEntity = (\r\n    str: string,\r\n    type: BaseType[]\r\n): ReturnedEntity => ({\r\n    str: str,\r\n    type: type\r\n});","import { STLCToken } from \"../Entity/STLCToken\";\r\nimport { CommonToken } from \"../Entity/CommonToken\";\r\n\r\n/**\r\n * Function that checks the number of brackets.\r\n * \r\n * @param arr - array of `STLCToken[]` or `CommonToken` objects that represents entered expression.\r\n * \r\n * @returns number that indicates brackets ratio. If number is positive - right brackets more then left brackets. If number is negative - left brackets more then right brackets. If number equals 0 - the count of left and right brackets the same.\r\n */\r\nexport const bracketsChecker = (\r\n    arr: STLCToken[] | CommonToken[]\r\n): number => {\r\n\r\n    let counter: number = 0;\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (arr[i].tokenType === \"(\")\r\n            counter++;\r\n        else if (arr[i].tokenType === \")\")\r\n            counter--;\r\n\r\n    }\r\n    return counter;\r\n}\r\n\r\n/**\r\n * Function that provides possition index of the sought token in array.\r\n *\r\n * @param arr - array of `STLCToken[]` or `CommonToken` objects that represents expression.\r\n * @param token - token of `STLCToken` or `CommonToken` type which should be found.\r\n * \r\n * @returns index of the sought token or `-1` if token doesn't found.\r\n */\r\nexport const getIndexOfSecondToken = (arr: STLCToken[] | CommonToken[], token: STLCToken | CommonToken): number => {\r\n    let flag = 0;\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n        if (arr[i].tokenType === token.tokenType) {\r\n            flag++;\r\n        }\r\n        if (flag === 2) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\n/**\r\n * Generator function that provides unique variables names.\r\n * \r\n * @returns unique variable name. Possible results: from `a` to `e` and from `g` to `z`.\r\n */\r\nexport function* getNextVar() {\r\n    var index = 97;\r\n    while (index < 123)\r\n    {\r\n        if (index === 102)\r\n            index += 1;\r\n        yield String.fromCharCode(index++);\r\n    }\r\n  }","import { BaseType, BaseTypeArrToLatexString, factoryBaseType } from \"../Entity/BaseType\";\r\nimport { factoryReturnedEntity, ReturnedEntity } from \"../Entity/ReturnedEntity\";\r\nimport { factoryCommonToken, CommonToken, VDASH } from \"../Entity/CommonToken\";\r\nimport { bracketsChecker, getIndexOfSecondToken } from \"../Utils/Utils\";\r\nimport { black, red } from \"../Styles/Styles\";\r\n\r\n/**\r\n * Function provides analyze entered expression and prepares `latex` string representation for `STLC 2` as well as for `T-NBL` expression type.\r\n * \r\n * @param t - array of `CommonToken` objects that represents entered expression.\r\n * @param expressionType - entered expression's type of `BaseType` type.\r\n * @param onError - callback function of `(message: string) => void` type for display error message.\r\n * @param isInner - flag of `boolean` type that represents whether the array `t` is an internal part of the entered expression or not.\r\n * @param isTNBL - flag of  `boolean` type that represents whether the array `t` is a T-NBL expression type or not.\r\n * \r\n * @returns `ReturnedEntity` object in case of success or `undefined` otherwise.\r\n */\r\nexport const analyzeExpression = (\r\n    t: CommonToken[],\r\n    expressionType: BaseType,\r\n    onError: (message: string) => void,\r\n    isInner: boolean,\r\n    isTNBL: boolean\r\n): ReturnedEntity | undefined => {\r\n\r\n    if (t.length === 0) {\r\n        onError(\"Expression error (#001.1)\");\r\n        return undefined;\r\n    }\r\n\r\n    // brackets checker\r\n    if (bracketsChecker(t) < 0) {\r\n        onError(\"Brackets mismatch (#001.2)\");\r\n        return undefined;\r\n    }\r\n\r\n    switch (t[0].tokenType) {\r\n        case true:\r\n            return tTrue(t, [expressionType], isTNBL, onError);\r\n\r\n        case false:\r\n            return tFalse(t, [expressionType], isTNBL, onError);\r\n\r\n        case \"pred\":\r\n            return tPred(t, expressionType, onError, isTNBL);\r\n\r\n        case \"succ\":\r\n            return tSucc(t, expressionType, onError, isTNBL);\r\n\r\n        case \"iszero\":\r\n            return tIszero(t, expressionType, onError, isTNBL);\r\n\r\n        case 0:\r\n            return tZero(t, [expressionType], isTNBL, onError);\r\n\r\n        case \"if\":\r\n            return ifThenElse(t, expressionType, onError, isInner, isTNBL);\r\n\r\n        case \"(\":\r\n            return tBra(t, expressionType, onError, isTNBL);\r\n\r\n        default:\r\n            onError(\"Undefined error (#001.3)\");\r\n            return undefined;\r\n    }\r\n}\r\n\r\n//T-IS-ZERO\r\nconst tIszero = (\r\n    t: CommonToken[],\r\n    expressionType: BaseType,\r\n    onError: (message: string) => void,\r\n    isTNBL: boolean\r\n): ReturnedEntity => {\r\n\r\n    if (t.length < 2) {\r\n        onError(\"IS-ZERO argument error (#005)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let resT = analyzeExpression(t.slice(1), factoryBaseType(\"Nat\"), onError, false, isTNBL);\r\n\r\n    if (expressionType.type === \"Bool\") {\r\n        return factoryReturnedEntity(`\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([expressionType], onError)}} (T-iszero)`, [expressionType]);\r\n    }\r\n    return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([expressionType], onError)}} (T-iszero)` + black, [expressionType]);\r\n}\r\n\r\n// T-ZERO\r\nconst tZero = (t: CommonToken[], expressionType: BaseType[], isTNBL: boolean, onError: (message: string) => void): ReturnedEntity => {\r\n\r\n    if (expressionType.length === 1 && expressionType[0].type === \"Nat\")\r\n        return factoryReturnedEntity(`\\\\dfrac{}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([factoryBaseType(\"Nat\")], onError)}} (T-zero)`, [factoryBaseType(\"Nat\")]);\r\n    else if (expressionType.length === 0)\r\n        return factoryReturnedEntity(`\\\\dfrac{}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([factoryBaseType(\"Nat\")], onError)}} (T-zero)`, [factoryBaseType(\"Nat\")]);\r\n    return factoryReturnedEntity(red + `\\\\dfrac{}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([factoryBaseType(\"Nat\")], onError)}} (T-zero)` + black, [factoryBaseType(\"Nat\")]);\r\n}\r\n\r\n// T-TRUE\r\nconst tTrue = (t: CommonToken[], expressionType: BaseType[], isTNBL: boolean, onError: (message: string) => void): ReturnedEntity => {\r\n    if (expressionType.length === 1 && expressionType[0].type === \"Bool\")\r\n        return factoryReturnedEntity(`\\\\dfrac{}{ ${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-true)`, [factoryBaseType(\"Bool\")]);\r\n    else if (expressionType.length === 0)\r\n        return factoryReturnedEntity(`\\\\dfrac{}{ ${getExpressionStringValue(t, isTNBL)} :Bool} (T-true)`, [factoryBaseType(\"Bool\")]);\r\n    return factoryReturnedEntity(red + `\\\\dfrac{} ${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-true)` + black, [factoryBaseType(\"Bool\")]);\r\n}\r\n\r\n// T-FALSE\r\nconst tFalse = (t: CommonToken[], expressionType: BaseType[], isTNBL: boolean, onError: (message: string) => void): ReturnedEntity => {\r\n    if (expressionType.length === 1 && expressionType[0].type === \"Bool\")\r\n        return factoryReturnedEntity(`\\\\dfrac{}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-false)`, [factoryBaseType(\"Bool\")]);\r\n    else if (expressionType.length === 0)\r\n        return factoryReturnedEntity(`\\\\dfrac{}{${getExpressionStringValue(t, isTNBL)} :Bool} (T-false)`, [factoryBaseType(\"Bool\")]);\r\n    return factoryReturnedEntity(red + `\\\\dfrac{}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-false)` + black, [factoryBaseType(\"Bool\")]);\r\n}\r\n\r\n// T-SUCC\r\nconst tSucc = (\r\n    t: CommonToken[],\r\n    expressionType: BaseType,\r\n    onError: (message: string) => void,\r\n    isTNBL: boolean\r\n): ReturnedEntity => {\r\n\r\n    if (t.length < 2) {\r\n        onError(\"SUCC argument error (#006)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let resT = analyzeExpression(t.slice(1), expressionType, onError, false, isTNBL);\r\n\r\n    if (expressionType.type === \"Nat\" || (resT?.type.length === 1 && resT?.type[0].type === \"Nat\")) {\r\n        return factoryReturnedEntity(`\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([expressionType], onError)}} (T-succ)`, [expressionType]);\r\n    }\r\n    return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([expressionType], onError)}} (T-succ)` + black, resT ? resT.type : []);\r\n}\r\n\r\n// T-PRED\r\nconst tPred = (\r\n    t: CommonToken[],\r\n    expressionType: BaseType,\r\n    onError: (message: string) => void,\r\n    isTNBL: boolean\r\n): ReturnedEntity => {\r\n\r\n    if (t.length < 2) {\r\n        onError(\"PRED argument error (#007)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let resT = analyzeExpression(t.slice(1), expressionType, onError, false, isTNBL);\r\n\r\n    if (expressionType.type === \"Nat\" || (resT?.type.length === 1 && resT?.type[0].type === \"Nat\")) {\r\n        return factoryReturnedEntity(`\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([expressionType], onError)}} (T-pred)`, [expressionType]);\r\n    }\r\n    return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([expressionType], onError)}} (T-pred)` + black, resT ? resT.type : []);\r\n}\r\n\r\n// IF-THEN-ELSE\r\nconst ifThenElse = (\r\n    t: CommonToken[],\r\n    expressionType: BaseType,\r\n    onError: (message: string) => void,\r\n    isInner: boolean,\r\n    isTNBL: boolean\r\n): ReturnedEntity => {\r\n\r\n    let ifClause: CommonToken[] = [];\r\n    let thenClause: CommonToken[] = [];\r\n    let elseClause: CommonToken[] = [];\r\n\r\n    let iIf: number = 0;\r\n    let iThen: number;\r\n    let iElse: number;\r\n\r\n    let innerIfStr: ReturnedEntity | undefined = undefined;\r\n    let innerThenStr: ReturnedEntity | undefined = undefined;\r\n    let innerElseStr: ReturnedEntity | undefined = undefined;\r\n\r\n    if (t.length === 0) {\r\n        onError(\"IF-THEN-ELSE syntax error (#008.1)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let isCorrect: boolean = t[0].tokenType === \"if\" && isInner && expressionType.type === \"Nat\" ? false : true;\r\n\r\n    let expression: CommonToken[] = t[0].tokenType === \"if\" ? t.slice(1) : t.slice(0);\r\n\r\n    for (iIf = 0; iIf < expression.length; iIf++) {\r\n        if (expression[iIf].tokenType !== \"then\" && expression[iIf].tokenType !== \"if\") {\r\n            ifClause.push(expression[iIf]);\r\n            if (iIf === expression.length - 1) {\r\n                onError(\"IF-THEN-ELSE syntax error. Expression has one or more errors. One of them - THEN clause is missing (#008.2)\");\r\n                return factoryReturnedEntity(\" \", []);\r\n            }\r\n        }\r\n        else if (expression[iIf].tokenType === \"then\") {\r\n            if (iIf === expression.length - 1) {\r\n                onError(\"IF-THEN-ELSE syntax error. Expression has one or more errors. One of them - THEN clause is missing (#008.3)\");\r\n                return factoryReturnedEntity(\" \", []);\r\n            }\r\n            expression.shift();\r\n            break;\r\n        }\r\n        else if (expression[iIf].tokenType === \"if\") {\r\n            let newArr = expression.slice(iIf, expression.length);\r\n            let index = getIndexOfSecondToken(newArr, factoryCommonToken(\"then\"));\r\n\r\n            expression = newArr.slice(index + 1, newArr.length);\r\n            let innerExpression = ifClause.concat(newArr.slice(0, index));\r\n            innerIfStr = analyzeExpression(innerExpression, factoryBaseType(\"Bool\"), onError, true, isTNBL);\r\n\r\n            iIf = 0;\r\n            break;\r\n        }\r\n    }\r\n    for (iThen = iIf; iThen < expression.length; iThen++) {\r\n        if (expression[iThen].tokenType !== \"else\" && expression[iThen].tokenType !== \"if\") {\r\n            thenClause.push(expression[iThen]);\r\n            if (iThen === expression.length - 1) {\r\n                onError(\"IF-THEN-ELSE syntax error. Expression has one or more errors. One of them - ELSE clause is missing (#008.4)\");\r\n                return factoryReturnedEntity(\" \", []);\r\n            }\r\n        }\r\n        else if (expression[iThen].tokenType === \"else\") {\r\n            if (iThen === expression.length - 1) {\r\n                onError(\"IF-THEN-ELSE syntax error. Expression has one or more errors. One of them - ELSE clause is missing (#008.5)\");\r\n                return factoryReturnedEntity(\" \", []);\r\n            }\r\n            expression.shift();\r\n            break;\r\n        }\r\n        else if (expression[iThen].tokenType === \"if\") {\r\n            let newArr = expression.slice(iThen, expression.length);\r\n            let index = getIndexOfSecondToken(newArr, factoryCommonToken(\"else\"));\r\n\r\n            expression = newArr.slice(index + 1, newArr.length);\r\n            let innerExpression = thenClause.concat(newArr.slice(iThen - 1, index));\r\n            innerThenStr = analyzeExpression(innerExpression, expressionType, onError, true, isTNBL);\r\n\r\n            iThen = 0;\r\n            break;\r\n\r\n        }\r\n    }\r\n    for (iElse = iThen; iElse < expression.length; iElse++) {\r\n        if ((expression[iElse].tokenType !== \"Nat\" || expression[iElse].tokenType !== \"Bool\") && expression[iElse].tokenType !== \"if\") {\r\n            elseClause.push(expression[iElse]);\r\n        }\r\n        else if (expression[iElse].tokenType === \"if\") {\r\n            let newArr = expression.slice(iElse, expression.length);\r\n            let index = getIndexOfSecondToken(newArr, factoryCommonToken(\"Nat\"));\r\n            if (index === -1)\r\n                index = getIndexOfSecondToken(newArr, factoryCommonToken(\"Bool\"));\r\n\r\n            expression = newArr.slice(index + 1, newArr.length);\r\n            let innerExpression = elseClause.concat(newArr.slice(iElse - 1, newArr.length));\r\n            innerElseStr = analyzeExpression(innerExpression, expressionType, onError, true, isTNBL);\r\n\r\n            iElse = 0;\r\n            break;\r\n\r\n        }\r\n    }\r\n\r\n    let ifValue: ReturnedEntity | undefined = innerIfStr === undefined ? analyzeExpression(ifClause, factoryBaseType(\"Bool\"), onError, false, isTNBL) : innerIfStr;\r\n    let thenValue: ReturnedEntity | undefined = innerThenStr === undefined ? analyzeExpression(thenClause, expressionType, onError, false, isTNBL) : innerThenStr;\r\n    let elseValue: ReturnedEntity | undefined = innerElseStr === undefined ? analyzeExpression(elseClause, expressionType, onError, false, isTNBL) : innerElseStr;\r\n\r\n    if (thenValue?.type[0].type !== elseValue?.type[0].type) {\r\n        onError(\"IF-THEN-ELSE syntax error. Expression has one or more errors. One of them - THEN and ELSE branches don't have the same type (#008.6)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    if (isInner) {\r\n        if (isCorrect) {\r\n            return factoryReturnedEntity(`\\\\dfrac{${ifValue?.str} \\\\enspace ${thenValue?.str} \\\\enspace ${elseValue?.str}}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString(thenValue ? thenValue?.type : [], onError)}} (T-if)`, thenValue ? thenValue?.type : []);\r\n        }\r\n        else {\r\n            return factoryReturnedEntity(red + `\\\\dfrac{${ifValue?.str} \\\\enspace ${thenValue?.str} \\\\enspace ${elseValue?.str}}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString(thenValue ? thenValue?.type : [], onError)}} (T-if)` + black, thenValue ? thenValue?.type : []);\r\n        }\r\n    }\r\n\r\n    return factoryReturnedEntity(`\\\\dfrac{${ifValue?.str} \\\\enspace ${thenValue?.str} \\\\enspace ${elseValue?.str}}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([expressionType], onError)}} (T-if)`, thenValue ? thenValue?.type : []);\r\n}\r\n\r\n// T-bra\r\nconst tBra = (\r\n    t: CommonToken[],\r\n    expressionType: BaseType,\r\n    onError: (message: string) => void,\r\n    isTNBL: boolean\r\n): ReturnedEntity => {\r\n\r\n    if (t.length < 3) {\r\n        onError(\"T-BRA syntax error (#010.1)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let arr = t.slice();\r\n\r\n    let left: number | undefined;\r\n    let right: number | undefined;\r\n\r\n    switch (bracketsChecker(arr)) {\r\n        case 0:\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i].tokenType === \"(\") {\r\n                    left = i;\r\n                    break;\r\n                }\r\n            }\r\n            for (let i = arr.length - 1; i > 0; i--) {\r\n                if (arr[i].tokenType === \")\") {\r\n                    right = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (left !== undefined && right !== undefined) {\r\n                arr.splice(left, 1);\r\n                arr.splice(right - 1, 1);\r\n            }\r\n\r\n            let result = analyzeExpression(arr, expressionType, onError, false, isTNBL);\r\n\r\n            return factoryReturnedEntity(`\\\\dfrac{${result ? result.str : \"\"}}{${getExpressionStringValue(t, isTNBL)} : ${BaseTypeArrToLatexString([expressionType], onError)}} (T-bra)`, [expressionType]);\r\n\r\n        case 1:\r\n        default:\r\n            onError(\"T-BRA syntax error (#010.2)\");\r\n            return factoryReturnedEntity(\" \", []);\r\n    }\r\n}\r\n\r\nconst getExpressionStringValue = (t: CommonToken[], isTNBL: boolean): string => {\r\n\r\n    let t1Copy = t.slice();\r\n    let res = isTNBL ? \" \" : VDASH;\r\n    res += t1Copy.map(elem => elem.tokenType).join(\" \\\\enspace \");\r\n\r\n    return res;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport CommonKeyboard from '../VisualComponents/CommonKeyboard';\r\nimport 'katex/dist/katex.min.css';\r\n// @ts-ignore\r\nimport { BlockMath } from 'react-katex';\r\nimport { CommonToken, VDASH } from '../Entity/CommonToken';\r\nimport { CommonPageProps, PageProps } from '../VisualComponents/Props';\r\nimport { Button, ButtonGroup, FormControl, Paper } from '@material-ui/core';\r\nimport { analyzeExpression } from '../EvRules/CommonEvRules';\r\nimport { BaseType, factoryBaseType } from '../Entity/BaseType';\r\n\r\n/**\r\n * Graphical user interface component that represents common page.\r\n * \r\n * @properties `props`- properties of `PageProps` and `CommonPageProps`.\r\n *\r\n * @returns `JSX.Element` that represents common page.\r\n */\r\nconst CommonPage: React.FC<PageProps & CommonPageProps> = props => {\r\n\r\n    const { isTNBL } = props;\r\n\r\n    const { infoHandler, errorHandler } = props;\r\n    const [expression, setExpression] = useState<CommonToken[]>([]);\r\n    const [evaluatedExpression, setEvaluatedExpression] = useState<string>(\" \");\r\n    const [formula, setFormula] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        if (expression.length > 0)\r\n            clear();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [isTNBL]);\r\n\r\n    const clear = (): void => {\r\n        setExpression([]);\r\n        setEvaluatedExpression(\" \");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ height: '20px' }}>\r\n            </div>\r\n            <CommonKeyboard\r\n                expression={expression}\r\n                setExpression={setExpression}\r\n            />\r\n\r\n            <div style={{ height: '20px' }}>\r\n            </div>\r\n            {\"Expression:\"}\r\n            <div style={{ height: '20px' }}>\r\n            </div>\r\n            <div>\r\n                <FormControl style={{ width: '50%' }}>\r\n                    <Paper elevation={3}>\r\n                        <BlockMath\r\n                            math={(isTNBL ? \" \" : VDASH) + expression.map(elem => {\r\n                                if (elem.tokenType === \"Nat\")\r\n                                    return \":Nat\";\r\n                                else if (elem.tokenType === \"Bool\")\r\n                                    return \":Bool\";\r\n                                return elem.tokenType;\r\n                            }).join(\" \\\\enspace \")}\r\n                            errorColor={'#cc0000'}\r\n                            renderError={(error: any) => {\r\n                                return <b>{`Fail: ${error.name}`}</b>\r\n                            }}\r\n                        />\r\n                    </Paper>\r\n                </FormControl>\r\n            </div>\r\n            <div style={{ height: '20px' }}>\r\n            </div>\r\n            <ButtonGroup color=\"secondary\" aria-label=\"outlined primary button group\">\r\n                <Button style={{ width: '110px' }} onClick={() => {\r\n                    clear();\r\n                }}>{\"CLEAR\"}</Button>\r\n            </ButtonGroup>\r\n            {\" \"}\r\n            <ButtonGroup color=\"secondary\" aria-label=\"outlined primary button group\">\r\n                <Button style={{ width: '110px' }} onClick={() => {\r\n                    let exprType = getExpressionType(expression, errorHandler);\r\n                    if (exprType) {\r\n                        setFormula(analyzeExpression(expression.slice(0, expression.length - 1), exprType, errorHandler, false, isTNBL)?.str);\r\n                        infoHandler(\"Expression was analyzed.\");\r\n                    }\r\n                }}>{\"ANALIZE\"}</Button>\r\n            </ButtonGroup>\r\n            {\" \"}\r\n            <ButtonGroup color=\"secondary\" aria-label=\"outlined primary button group\">\r\n                <Button style={{ width: '110px' }} onClick={() => { if (formula) setEvaluatedExpression(formula); }}>{\"DRAW\"}</Button>\r\n            </ButtonGroup>\r\n\r\n\r\n\r\n            <div style={{ height: '20px' }}></div>\r\n            <BlockMath\r\n                math={evaluatedExpression}\r\n                errorColor={'#cc0000'}\r\n                renderError={(error: any) => {\r\n                    return <b>{`Fail: ${error.name}`}</b>\r\n                }}\r\n            />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default CommonPage;\r\n\r\nconst getExpressionType = (t: CommonToken[], onError: (error: any, message: string) => void): BaseType | undefined => {\r\n    if (t.length < 2) {\r\n        onError(undefined, \"Expression type error\");\r\n        return undefined;\r\n    }\r\n    switch (t[t.length - 1].tokenType) {\r\n        case \"Nat\":\r\n            return factoryBaseType(\"Nat\");\r\n        case \"Bool\":\r\n            return factoryBaseType(\"Bool\");\r\n        default:\r\n            return undefined;\r\n    }\r\n}","/**\r\n * `STLCToken` interface.\r\n * \r\n * @property tokenType - defines STLC token.\r\n * @property varName - stores the name of a variable if the token is a `var`. Optional property.\r\n * @property varType - stores the type of a variable if the token is a `var`. Optional property.\r\n * @property varAbstracted - stores the state (is variable abstracted or not) of a variable if the token is a `var`. Optional property.\r\n * @property gammaType - stores the context type of a variable if the token is a `var`. Optional property.\r\n */\r\nexport interface STLCToken {\r\n    tokenType: true | false | \"pred\" | \"succ\" | \"iszero\" | 0 | \"if\" | \"then\" | \"else\" | \"(\" | \")\" | \"VD\" | \"var\" | \"f\";\r\n    varName?: string;\r\n    varType?: \"Nat\" | \"Bool\";\r\n    varAbstracted?: boolean;\r\n    gammaType?: \"Nat\" | \"Bool\";\r\n}\r\n\r\n/**\r\n * Factory of `STLCToken` object.\r\n * \r\n * @param tokenType - type of token. Possible types options: `true` or `false` or `pred` or `succ` or `iszero` or `0` or `if` or `then` or `else` or `(` or `)` or `VD` or `var` or `f`\r\n * @param varName - stores the name of a variable if the token is a `var`. Optional property.\r\n * @param varType - stores the type of a variable if the token is a `var`. Optional property.\r\n * @param varAbstracted - stores the state (is variable abstracted or not) of a variable if the token is a `var`. Optional property.\r\n * @param gammaType - stores the context type of a variable if the token is a `var`. Optional property.\r\n * \r\n * @returns `STLCToken` object.\r\n */\r\nexport const factorySTLCToken = (\r\n    tokenType: true | false | \"pred\" | \"succ\" | \"iszero\" | 0 | \"if\" | \"then\" | \"else\" | \"(\" | \")\" | \"VD\" | \"var\" | \"f\",\r\n    varName?: string,\r\n    varType?: \"Nat\" | \"Bool\",\r\n    varAbstracted?: boolean,\r\n    gammaType?: \"Nat\" | \"Bool\"\r\n): STLCToken => (\r\n    {\r\n        tokenType: tokenType,\r\n        varName: varName,\r\n        varType: varType,\r\n        varAbstracted: varAbstracted,\r\n        gammaType: gammaType\r\n    }\r\n);","import React from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\n/**\r\n * `VarTypeDialogProps` - variable type selection dialog's properties.\r\n * \r\n * @property dialogVisability - dialog window's visability property of `boolean` type.\r\n * @property setDialogVisability - setter of dialog window's visability property of `React.Dispatch<React.SetStateAction<boolean>>` type.\r\n * @property setSelectedVarTypeValue - setter of variable's type property of `React.Dispatch<React.SetStateAction<boolean>>` type.\r\n */\r\nexport interface VarTypeDialogProps {\r\n  dialogVisability: boolean,  \r\n  setDialogVisability: React.Dispatch<React.SetStateAction<boolean>>,\r\n  setSelectedVarTypeValue: React.Dispatch<React.SetStateAction<\"Nat\" | \"Bool\" | undefined>>\r\n}\r\n\r\n/**\r\n * Graphical user interface component that represents variable's type selection dialog.\r\n * \r\n * @properties `props`- properties of `VarTypeDialogProps`.\r\n *\r\n * @returns `JSX.Element` that represents variable's type selection dialog.\r\n */\r\nexport const VarTypeDialog: React.FC<VarTypeDialogProps> = props => {\r\n  const { dialogVisability, setDialogVisability, setSelectedVarTypeValue } = props;\r\n\r\n  const types: ('Nat'|'Bool')[] = ['Nat', 'Bool'];\r\n\r\n  const handleClose = () => {\r\n    setDialogVisability(false);\r\n  };\r\n\r\n  const handleListItemClick = (value: \"Nat\" | \"Bool\") => {\r\n    setSelectedVarTypeValue(value);\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={dialogVisability} disableBackdropClick disableEscapeKeyDown>\r\n      <DialogTitle id=\"simple-dialog-title\">{\"Please, select variable type\"}</DialogTitle>\r\n      <List>\r\n        {types.map((type) => (\r\n          <ListItem button onClick={() => handleListItemClick(type)} key={type}>\r\n            <ListItemText primary={type} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Dialog>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { STLCToken } from '../Entity/STLCToken';\r\n\r\ninterface Column {\r\n    id: 'name' | 'type';\r\n    label: string;\r\n    minWidth?: number;\r\n    align?: 'right';\r\n    format?: (value: number) => string;\r\n}\r\n\r\nconst columns: Column[] = [\r\n    { id: 'name', label: 'Variable name', minWidth: 100 },\r\n    { id: 'type', label: 'Variable type', minWidth: 100 },\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 200,\r\n    },\r\n});\r\n\r\n/**\r\n * `TableVariablesProps` - variables table's properties.\r\n * \r\n * @property data - array of `STLCToken` objects that represents entered expression.\r\n */\r\nexport interface TableVariablesProps {\r\n    data: STLCToken[];\r\n}\r\n\r\n/**\r\n * Graphical user interface component that represents the table of variables that exist in entered expression.\r\n * \r\n * @properties `props`- properties of `TableVariablesProps`.\r\n *\r\n * @returns `JSX.Element` that represents the table of variables and their types.\r\n */\r\nconst TableVariables: React.FC<TableVariablesProps> = props => {\r\n\r\n    const { data } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Paper style={{height: 200}}>\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\" size=\"small\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((column) => (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    align={column.align}\r\n                                    style={{ minWidth: column.minWidth }}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                        {data.map((row) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.varName} >\r\n                                    <TableCell key={\"varName\" + row.varName}>\r\n                                        {row.varName}\r\n                                    </TableCell>\r\n                                    <TableCell key={\"varType\" + row.varType}>\r\n                                        {row.varType}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n\r\n                </Table>\r\n            </TableContainer>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default TableVariables;","import React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\r\nimport Draggable from 'react-draggable';\r\nimport { ButtonGroup, FormControl, MenuItem, Select } from '@material-ui/core';\r\n// @ts-ignore\r\nimport { InlineMath, BlockMath } from 'react-katex';\r\nimport { factorySTLCToken, STLCToken } from '../Entity/STLCToken';\r\nimport { VarTypeDialog } from './VarTypeDialog';\r\nimport TableVariables from './TableVariables';\r\n\r\nfunction PaperComponent(props: PaperProps) {\r\n    return (\r\n        <Draggable handle=\"#draggable-dialog-title\" cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n            <Paper {...props} />\r\n        </Draggable>\r\n    );\r\n}\r\n\r\n/**\r\n * `STLCKeyboardProps` - keyboard's properties.\r\n * \r\n * @property title - dialog window's title of `string` type.\r\n * @property enabled - dialog window's `enabled` property of `boolean` type.\r\n * @property setT - setter for expression of `React.Dispatch<React.SetStateAction<STLCToken[]>>` type.\r\n * @property setVars - setter for variables of `React.Dispatch<React.SetStateAction<STLCToken[]>>` type.\r\n * @property setFormula - setter for formula of `React.Dispatch<React.SetStateAction<string | undefined>>` type.\r\n * @property varGenerator - variables name generator of `Generator<string, void, unknown>` type.\r\n * @property vars - array of `STLCToken` objects that represents existing variables in entered expression. Optional property.\r\n */\r\nexport interface STLCKeyboardProps {\r\n    title: string;\r\n    enabled: boolean;\r\n    setT: React.Dispatch<React.SetStateAction<STLCToken[]>>;\r\n    setVars: React.Dispatch<React.SetStateAction<STLCToken[]>>;\r\n    setFormula: React.Dispatch<React.SetStateAction<string | undefined>>;\r\n    varGenerator: Generator<string, void, unknown>\r\n    vars?: STLCToken[]\r\n}\r\n\r\n/**\r\n * Graphical user interface component that represents STLC virtual keyboard for interactive with user.\r\n * \r\n * @properties `props`- properties of `KeyboardProps`.\r\n *\r\n * @returns `JSX.Element` that represents virtual keyboard.\r\n */\r\nconst STLCKeyboard: React.FC<STLCKeyboardProps> = props => {\r\n\r\n    const { title, setT, setVars, enabled, setFormula, varGenerator, vars } = props;\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const [localT, setLocalT] = useState<STLCToken[]>([]);\r\n\r\n    const [localVars, setLocalVars] = useState<STLCToken[]>(vars ? [...vars] : []);\r\n\r\n    const [dialogVisability, setDialogVisability] = useState<boolean>(false);\r\n    const [selectedVarTypeValue, setSelectedVarTypeValue] = useState<'Nat' | 'Bool'>();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        handleClear();\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setT([...localT]);\r\n        setVars([...localVars]);\r\n        setFormula(undefined);\r\n        handleClose();\r\n    }\r\n\r\n    const handleChange = (token: STLCToken): void => {\r\n        setLocalT([...localT, token]);\r\n    };\r\n\r\n    const handleBackspace = (): void => {\r\n        if (localT[localT.length - 1].tokenType === \"var\")\r\n            setLocalVars(localVars.slice(0, localVars.length - 1));\r\n\r\n        setLocalT([...localT.slice(0, localT.length - 1)]);        \r\n    }\r\n\r\n    const handleClear = (): void => {\r\n        setLocalT([]);\r\n        setLocalVars([]);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (dialogVisability) {\r\n            setDialogVisability(false);\r\n\r\n            let newVar = varGenerator.next();\r\n\r\n            if (newVar.value && selectedVarTypeValue) {\r\n\r\n                let newVarToken = factorySTLCToken(\"var\", newVar.value, selectedVarTypeValue, false);\r\n\r\n                setLocalVars([...localVars, newVarToken]);\r\n\r\n                handleChange(newVarToken);\r\n                setSelectedVarTypeValue(undefined);\r\n            }\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [selectedVarTypeValue]);\r\n\r\n    useEffect(() => {\r\n        if (vars)\r\n            setLocalVars([...vars])\r\n    }, [vars]);\r\n\r\n    return (\r\n        <div>\r\n            <Button disabled={!enabled} variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                {title}\r\n            </Button>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                PaperComponent={PaperComponent}\r\n                aria-labelledby=\"draggable-dialog-title\"\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\r\n                    {`Please, input ${title}:`}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <div style={{ textAlign: 'center' }}>\r\n\r\n                        <FormControl disabled style={{ width: '100%' }}>\r\n                            <Paper elevation={3} style={{ width: '100%' }}>\r\n                                <BlockMath\r\n                                    math={\" \" + localT.map(elem => {\r\n                                        if (elem.tokenType === 'var')\r\n                                            return elem.varName;\r\n                                        return elem.tokenType;\r\n                                    }).join(\" \\\\enspace \")}\r\n                                    errorColor={'#cc0000'}\r\n                                    renderError={(error: any) => {\r\n                                        return <b>{`Fail: ${error.name}`}</b>\r\n                                    }}\r\n                                />\r\n                            </Paper>\r\n                        </FormControl>\r\n\r\n                        <div style={{ height: '20px' }}>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(true)) }}>{\"TRUE\"}</Button>\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(false)) }}>{\"FALSE\"}</Button>\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(\"succ\")) }}>{\"SUCC\"}</Button>\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(\"pred\")) }}>{\"PRED\"}</Button>\r\n                            </ButtonGroup>\r\n                            <br />\r\n                            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(\"if\")) }}>{\"IF\"}</Button>\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(\"then\")) }}>{\"THEN\"}</Button>\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(\"else\")) }}>{\"ELSE\"}</Button>\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(\"iszero\")) }}>{\"ISZERO\"}</Button>\r\n                            </ButtonGroup>\r\n                            <br />\r\n                            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(0)) }}>{\"0\"}</Button>\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(\"(\")) }}>{\"(\"}</Button>\r\n                                <Button disabled={isDisabled(false, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(\")\")) }}>{\")\"}</Button>\r\n                                <Button disabled={isDisabled(true, localT)} style={{ width: '110px' }} onClick={(event) => { handleChange(factorySTLCToken(\"f\")) }}>{\"f\"}</Button>\r\n                            </ButtonGroup>\r\n                            <br />\r\n                            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                                <Button disabled={isDisabled(false, localT) || (localT.length > 0 && localT[localT.length - 1].tokenType === \"var\")} style={{ width: '110px' }} onClick={(event) => { setDialogVisability(true); }}>\r\n                                    {\"new Var\"}\r\n                                </Button>\r\n                                {varCombobox(localVars, localT, setLocalT)}\r\n                                <Button style={{ width: '110px', color: 'red' }} onClick={(event) => { handleBackspace() }}>{\"Backspace\"}</Button>\r\n                                <Button style={{ width: '110px', color: 'red' }} onClick={(event) => { handleClear() }}>{\"Clear\"}</Button>\r\n                            </ButtonGroup>\r\n\r\n                        </div>\r\n                        <div style={{ height: '20px' }}>\r\n                        </div>\r\n\r\n                        <TableVariables\r\n                            data={localVars}\r\n                        />                        \r\n\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"secondary\">\r\n                        {\"Cancel\"}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={handleOk}\r\n                        color=\"primary\">\r\n                        {\"Ok\"}\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n            <VarTypeDialog\r\n                dialogVisability={dialogVisability}\r\n                setDialogVisability={setDialogVisability}\r\n                setSelectedVarTypeValue={setSelectedVarTypeValue}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default STLCKeyboard;\r\n\r\nconst isDisabled = (isF: boolean, localT: STLCToken[]): boolean => {\r\n    if (isF) {\r\n        if (localT.length === 0) {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        if (localT.length === 0) {\r\n            return false;\r\n        }\r\n        if (localT.length > 0 && localT[0].tokenType !== 'f') {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nconst varCombobox = (\r\n    vars: STLCToken[],\r\n    localT: STLCToken[],\r\n    setLocalT: React.Dispatch<React.SetStateAction<STLCToken[]>>\r\n): JSX.Element => {\r\n\r\n    return (\r\n        <FormControl>\r\n            <Select\r\n                disabled={vars.length === 0 || (localT.length > 0 && localT[localT.length - 1].tokenType === \"var\")}\r\n                style={{ minWidth: '110px', maxHeight: '40px' }}\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"varType\"\r\n                value={\"\"}\r\n                onChange={(event) => {\r\n                    let newValue = vars.find(elem => elem.varName === event.target.value)\r\n                    if (newValue)\r\n                        setLocalT([...localT, newValue]);\r\n                }}\r\n            >\r\n                {vars.map((e) => (\r\n                    <MenuItem\r\n                        value={e.varName}\r\n                        key={e.varName}\r\n                    >\r\n                        <InlineMath math={e.varName} />\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n}","import { BaseType } from \"./BaseType\";\r\n\r\n/**\r\n * `Named` interface.\r\n * \r\n * @property expression - identifier that uniquely identifies `Named` object. Readonly property.\r\n * @property setExpression - array of `T extends BaseType` objects. Readonly property.\r\n */\r\nexport interface Named<T extends BaseType[]> {\r\n  readonly id: number;\r\n  readonly type: T;\r\n}\r\n\r\n/**\r\n * Factory of `Named` object.\r\n * \r\n * @param id - identifier that uniquely identifies `Named` object.\r\n * @param type - array of `BaseType` objects.\r\n * \r\n * @returns `Named` object.\r\n */\r\nexport const toNamed = (id: number, type: BaseType[]): Named<BaseType[]> => ({\r\n  id: id,\r\n  type: type,\r\n});","import { BaseType, factoryBaseType, BaseTypeArrToLatexString } from \"../Entity/BaseType\";\r\nimport { factoryReturnedEntity, ReturnedEntity } from \"../Entity/ReturnedEntity\";\r\nimport { VDASH } from \"../Entity/CommonToken\";\r\nimport { factorySTLCToken, STLCToken } from \"../Entity/STLCToken\";\r\nimport { bracketsChecker, getIndexOfSecondToken } from \"../Utils/Utils\";\r\nimport { black, red } from \"../Styles/Styles\";\r\n\r\n/**\r\n * Function provides analyze entered expression and prepares `latex` string representation for `STLC 1` expression type.\r\n * \r\n * @param t1 - array of `STLCToken` objects that represents first term of entered expression.\r\n * @param t2 - array of `STLCToken` objects that represents second term of entered expression or `undefined` if entered expression does not contain second term.\r\n * @param fType - array of `BaseType` objects that represents type of `f` function in entered expression or `undefined` if entered expression does not contain `f` function.\r\n * @param expressionType - array of `BaseType` objects that represents type of entered expression.\r\n * @param onError - callback function of `(message: string) => void` type for display error message.\r\n * @param isInner - flag of `boolean` type that represents whether the array `t1 is an internal part of the entered expression or not.\r\n * \r\n * @returns `ReturnedEntity` object in case of success or `undefined` otherwise.\r\n */\r\nexport const analyzeExpression = (\r\n    t1: STLCToken[],\r\n    t2: STLCToken[] | undefined,\r\n    fType: BaseType[] | undefined,\r\n    expressionType: BaseType[],\r\n    onError: (message: string) => void,\r\n    isInner: boolean\r\n): ReturnedEntity | undefined => {\r\n\r\n    let res = \"\";\r\n\r\n    if (!expressionType) {\r\n        onError(\"Expression type error (#001.1)\");\r\n        return undefined;\r\n    }\r\n\r\n    // T-abs\r\n    if (isTAbsRule(t1) || (t2 && isTAbsRule(t2))) {\r\n        let result = tAbs(t1, t2, fType, expressionType, onError);\r\n        result.str = res + result.str;\r\n        return result;\r\n    }\r\n    // T-app\r\n    else if (t2 && t1.length > 0 && t2.length > 0) {\r\n        let result = tApp(t1, t2, fType, expressionType, onError);\r\n        result.str = res + result.str;\r\n        return result;\r\n    }\r\n\r\n    // Other rules\r\n    else {\r\n        switch (t1[0].tokenType) {\r\n            case true:\r\n                return tTrue(t1, expressionType, onError);\r\n            case false:\r\n                return tFalse(t1, expressionType, onError);\r\n            case \"var\":\r\n                return tVar(t1, expressionType, onError);\r\n            case \"(\":\r\n                {\r\n                    let result = tBra(t1, fType, expressionType, onError);\r\n                    result.str = res + result.str;\r\n                    return result;\r\n                }\r\n            case \"iszero\":\r\n                {\r\n                    let result = tIszero(t1, fType, expressionType, onError);\r\n                    result.str = res + result.str;\r\n                    return result;\r\n                }\r\n            case 0:\r\n                return tZero(t1, expressionType, onError);\r\n            case \"succ\":\r\n                {\r\n                    let result = tSucc(t1, fType, expressionType, onError);\r\n                    result.str = res + result.str;\r\n                    return result;\r\n                }\r\n            case \"pred\":\r\n                {\r\n                    let result = tPred(t1, fType, expressionType, onError);\r\n                    result.str = res + result.str;\r\n                    return result;\r\n                }\r\n            case \"if\":\r\n                {\r\n                    let result = ifThenElse(t1, fType, expressionType, onError, isInner);\r\n                    result.str = res + result.str;\r\n                    return result;\r\n                }\r\n            case \"f\":\r\n                if (fType)\r\n                    return tF(t1, expressionType, fType, onError);\r\n                break;\r\n\r\n            default:\r\n        }\r\n    }\r\n    onError(\"Undefined error (#001.2)\");\r\n    return undefined;\r\n}\r\n\r\n// T-APP\r\nconst tApp = (\r\n    t1: STLCToken[],\r\n    t2: STLCToken[],\r\n    fType: BaseType[] | undefined,\r\n    expressionType: BaseType[],\r\n    onError: (message: string) => void\r\n): ReturnedEntity => {\r\n\r\n    let resT2 = analyzeExpression(t2, undefined, fType, expressionType, onError, false);\r\n    let resT1 = analyzeExpression(t1, undefined, fType, resT2 ? [resT2.type[0]].concat(expressionType) : expressionType, onError, false);\r\n\r\n    if (t1.length > 0)\r\n        return factoryReturnedEntity(`\\\\dfrac{${resT1?.str} \\\\enspace ${resT2?.str}} {${getExpressionStringValue(t1, t2)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-app)`, []);\r\n    else {\r\n        onError(\"T-app error (#002)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n}\r\n\r\n// T-ABS\r\nconst tAbs = (\r\n    t1: STLCToken[],\r\n    t2: STLCToken[] | undefined,\r\n    fType: BaseType[] | undefined,\r\n    expressionType: BaseType[],\r\n    onError: (message: string) => void\r\n): ReturnedEntity => {\r\n\r\n    if (expressionType.length < 2) {\r\n        onError(\"Expression type error (#003.1)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let expressionStringValue = getExpressionStringValue(t1, t2);\r\n\r\n    if (t2) {\r\n        let elemT1 = findFirstUnAbsVar(t1);\r\n        let elemT2 = findFirstUnAbsVar(t2);\r\n        let flag = true;\r\n        if (elemT1) {\r\n            absAllVars(t1, elemT1, expressionType);\r\n            flag = false;\r\n        }\r\n        if (elemT2) {\r\n            absAllVars(t2, elemT2, expressionType);\r\n            flag = false;\r\n        }\r\n        if (flag) {\r\n            onError(\"T-abs type error (#003.2)\");\r\n            return factoryReturnedEntity(\" \", []);\r\n        }\r\n    }\r\n    else {\r\n        let elemT1 = findFirstUnAbsVar(t1);\r\n\r\n        if (elemT1)\r\n            absAllVars(t1, elemT1, expressionType);\r\n        else {\r\n            onError(\"T-abs type error (#003.3)\");\r\n            return factoryReturnedEntity(\" \", []);\r\n        }\r\n    }\r\n\r\n    let resT1 = analyzeExpression(t1, t2, fType, expressionType.slice(1), onError, false);\r\n\r\n    return factoryReturnedEntity(`\\\\dfrac{${resT1?.str}}{${expressionStringValue} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-abs)`, resT1 ? resT1.type : []);\r\n}\r\n\r\n// T-VAR\r\nconst tVar = (t: STLCToken[], expressionType: BaseType[], onError: (message: string) => void): ReturnedEntity => {\r\n    if (expressionType.length === 1 && expressionType[0].type === t[0].varType) {\r\n        if (t[0].varType === t[0].gammaType)\r\n            return factoryReturnedEntity(`\\\\dfrac{${t[0].varName} : ${t[0].gammaType} \\\\in \\\\Gamma}{\\\\Gamma \\\\vdash ${t[0].varName} : ${t[0].varType}} (T-var)`, [factoryBaseType(t[0].varType)]);\r\n        return factoryReturnedEntity(`\\\\dfrac{${red} ${t[0].varName} : ${t[0].gammaType} \\\\in \\\\Gamma ${black}}{\\\\Gamma \\\\vdash ${t[0].varName} : ${t[0].varType}} (T-var)`, [factoryBaseType(t[0].varType)]);\r\n    }\r\n\r\n    if (t[0].varType)\r\n        return factoryReturnedEntity(`${red} \\\\dfrac{${t[0].varName} : ${t[0].gammaType} \\\\in \\\\Gamma}{\\\\Gamma \\\\vdash ${t[0].varName} : ${t[0].varType}} (T-var) ${black}`, [factoryBaseType(t[0].varType)]);\r\n    else {\r\n        onError(\"T-VAR error (#004)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n}\r\n\r\n//T-IS-ZERO\r\nconst tIszero = (\r\n    t: STLCToken[],\r\n    fType: BaseType[] | undefined,\r\n    expressionType: BaseType[],\r\n    onError: (message: string) => void\r\n): ReturnedEntity => {\r\n\r\n    if (t.length < 2) {\r\n        onError(\"IS-ZERO argument error (#005)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let resT = analyzeExpression(t.slice(1), undefined, fType, [factoryBaseType(\"Nat\")], onError, false);\r\n\r\n    if (expressionType.length === 1) {\r\n        if (expressionType[0].type === \"Bool\")\r\n            return factoryReturnedEntity(`\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-iszero)`, expressionType);\r\n        else\r\n            return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-iszero)` + black, expressionType);\r\n    }\r\n    else if (expressionType.length === 0 && resT?.type.length === 1) {\r\n        if (resT?.type[0].type === \"Nat\")\r\n            return factoryReturnedEntity(`\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString([factoryBaseType(\"Bool\")], onError)}} (T-iszero)`, [factoryBaseType(\"Bool\")]);\r\n        else\r\n            return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString([factoryBaseType(\"Bool\")], onError)}} (T-iszero)` + black, [factoryBaseType(\"Bool\")]);\r\n    }\r\n    return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-iszero)` + black, expressionType);\r\n}\r\n\r\n// T-ZERO\r\nconst tZero = (t: STLCToken[], expressionType: BaseType[], onError: (message: string) => void): ReturnedEntity => {\r\n    if (expressionType.length === 1 && expressionType[0].type === \"Nat\")\r\n        return factoryReturnedEntity(`\\\\dfrac{}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString([factoryBaseType(\"Nat\")], onError)}} (T-zero)`, [factoryBaseType(\"Nat\")]);\r\n    else if (expressionType.length === 0)\r\n        return factoryReturnedEntity(`\\\\dfrac{}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString([factoryBaseType(\"Nat\")], onError)}} (T-zero)`, [factoryBaseType(\"Nat\")]);\r\n    return factoryReturnedEntity(red + `\\\\dfrac{}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString([factoryBaseType(\"Nat\")], onError)}} (T-zero)` + black, [factoryBaseType(\"Nat\")]);\r\n}\r\n\r\n// T-TRUE\r\nconst tTrue = (t: STLCToken[], expressionType: BaseType[], onError: (message: string) => void): ReturnedEntity => {\r\n    if (expressionType.length === 1 && expressionType[0].type === \"Bool\")\r\n        return factoryReturnedEntity(`\\\\dfrac{}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-true)`, [factoryBaseType(\"Bool\")]);\r\n    else if (expressionType.length === 0)\r\n        return factoryReturnedEntity(`\\\\dfrac{}{${getExpressionStringValue(t, undefined)} :Bool} (T-true)`, [factoryBaseType(\"Bool\")]);\r\n    return factoryReturnedEntity(red + `\\\\dfrac{}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-true)` + black, [factoryBaseType(\"Bool\")]);\r\n}\r\n\r\n// T-FALSE\r\nconst tFalse = (t: STLCToken[], expressionType: BaseType[], onError: (message: string) => void): ReturnedEntity => {\r\n    if (expressionType.length === 1 && expressionType[0].type === \"Bool\")\r\n        return factoryReturnedEntity(`\\\\dfrac{}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-false)`, [factoryBaseType(\"Bool\")]);\r\n    else if (expressionType.length === 0)\r\n        return factoryReturnedEntity(`\\\\dfrac{}{${getExpressionStringValue(t, undefined)} :Bool} (T-false)`, [factoryBaseType(\"Bool\")]);\r\n    return factoryReturnedEntity(red + `\\\\dfrac{}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-false)` + black, [factoryBaseType(\"Bool\")]);\r\n}\r\n\r\n// T-SUCC\r\nconst tSucc = (\r\n    t: STLCToken[],\r\n    fType: BaseType[] | undefined,\r\n    expressionType: BaseType[],\r\n    onError: (message: string) => void\r\n): ReturnedEntity => {\r\n\r\n    if (t.length < 2) {\r\n        onError(\"SUCC argument error (#006)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let resT = analyzeExpression(t.slice(1), undefined, fType, expressionType, onError, true);\r\n\r\n    if (expressionType.length === 1) {\r\n        if (expressionType[0].type === \"Nat\")\r\n            return factoryReturnedEntity(`\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-succ)`, expressionType);\r\n        else\r\n            return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-succ)` + black, expressionType);\r\n    }\r\n    else if (expressionType.length === 0 && resT?.type.length === 1) {\r\n        if (resT?.type[0].type === \"Nat\")\r\n            return factoryReturnedEntity(`\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString([resT?.type[0]], onError)}} (T-succ)`, [resT?.type[0]]);\r\n        else\r\n            return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString([resT?.type[0]], onError)}} (T-succ)` + black, [resT?.type[0]]);\r\n    }\r\n    return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-succ)` + black, expressionType);\r\n}\r\n\r\n// T-PRED\r\nconst tPred = (\r\n    t: STLCToken[],\r\n    fType: BaseType[] | undefined,\r\n    expressionType: BaseType[],\r\n    onError: (message: string) => void\r\n): ReturnedEntity => {\r\n\r\n    if (t.length < 2) {\r\n        onError(\"PRED argument error (#007)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let resT = analyzeExpression(t.slice(1), undefined, fType, expressionType, onError, true);\r\n\r\n    if (expressionType.length === 1) {\r\n        if (expressionType[0].type === \"Nat\")\r\n            return factoryReturnedEntity(`\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-pred)`, expressionType);\r\n        else\r\n            return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-pred)` + black, expressionType);\r\n    }\r\n    else if (expressionType.length === 0 && resT?.type.length === 1) {\r\n        if (resT?.type[0].type === \"Nat\")\r\n            return factoryReturnedEntity(`\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString([resT?.type[0]], onError)}} (T-pred)`, [resT?.type[0]]);\r\n        else\r\n            return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString([resT?.type[0]], onError)}} (T-pred)` + black, [resT?.type[0]]);\r\n    }\r\n    return factoryReturnedEntity(red + `\\\\dfrac{${resT?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-pred)` + black, expressionType);\r\n}\r\n\r\n// IF-THEN-ELSE\r\nconst ifThenElse = (\r\n    t: STLCToken[],\r\n    fType: BaseType[] | undefined,\r\n    expressionType: BaseType[],\r\n    onError: (message: string) => void,\r\n    isInner: boolean,\r\n): ReturnedEntity => {\r\n\r\n    let ifClause: STLCToken[] = [];\r\n    let thenClause: STLCToken[] = [];\r\n    let elseClause: STLCToken[] = [];\r\n\r\n    let iIf: number = 0;\r\n    let iThen: number;\r\n    let iElse: number;\r\n\r\n    let innerIfStr: ReturnedEntity | undefined = undefined;\r\n    let innerThenStr: ReturnedEntity | undefined = undefined;\r\n    let innerElseStr: ReturnedEntity | undefined = undefined;\r\n\r\n    if (t.length === 0) {\r\n        onError(\"IF-THEN-ELSE syntax error (#008.1)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let isCorrect: boolean = t[0].tokenType === \"if\" && isInner && (expressionType.length === 1 && expressionType[0] === factoryBaseType(\"Nat\")) ? false : true;\r\n\r\n    let expression: STLCToken[] = t[0].tokenType === \"if\" ? t.slice(1) : t.slice(0);\r\n\r\n    for (iIf = 0; iIf < expression.length; iIf++) {\r\n        if (expression[iIf].tokenType !== \"then\" && expression[iIf].tokenType !== \"if\") {\r\n            ifClause.push(expression[iIf]);\r\n            if (iIf === expression.length - 1) {\r\n                onError(\"IF-THEN-ELSE syntax error. Expression has one or more errors. One of them - THEN clause is missing (#008.2)\" + JSON.stringify(expression));\r\n                return factoryReturnedEntity(\" \", []);\r\n            }\r\n        }\r\n        else if (expression[iIf].tokenType === \"then\") {\r\n            if (iIf === expression.length - 1) {\r\n                onError(\"IF-THEN-ELSE syntax error. Expression has one or more errors. One of them - THEN clause is missing (#008.3)\");\r\n                return factoryReturnedEntity(\" \", []);\r\n            }\r\n            expression.shift();\r\n            break;\r\n        }\r\n        else if (expression[iIf].tokenType === \"if\") {\r\n            let newArr = expression.slice(iIf, expression.length);\r\n            let index = getIndexOfSecondToken(newArr, factorySTLCToken(\"then\"));\r\n\r\n            expression = newArr.slice(index + 1, newArr.length);\r\n            let innerExpression = ifClause.concat(newArr.slice(0, index));\r\n            innerIfStr = analyzeExpression(innerExpression, undefined, fType, [factoryBaseType(\"Bool\")], onError, true);\r\n\r\n            iIf = 0;\r\n            break;\r\n        }\r\n    }\r\n    for (iThen = iIf; iThen < expression.length; iThen++) {\r\n        if (expression[iThen].tokenType !== \"else\" && expression[iThen].tokenType !== \"if\") {\r\n            thenClause.push(expression[iThen]);\r\n            if (iThen === expression.length - 1) {\r\n                onError(\"IF-THEN-ELSE syntax error. Expression has one or more errors. One of them - ELSE clause is missing (#008.4)\");\r\n                return factoryReturnedEntity(\" \", []);\r\n            }\r\n        }\r\n        else if (expression[iThen].tokenType === \"else\") {\r\n            if (iThen === expression.length - 1) {\r\n                onError(\"IF-THEN-ELSE syntax error. Expression has one or more errors. One of them - ELSE clause is missing (#008.5)\");\r\n                return factoryReturnedEntity(\" \", []);\r\n            }\r\n            expression.shift();\r\n            break;\r\n        }\r\n        else if (expression[iThen].tokenType === \"if\") {\r\n            let newArr = expression.slice(iThen, expression.length);\r\n            let index = getIndexOfSecondToken(newArr, factorySTLCToken(\"else\"));\r\n\r\n            expression = newArr.slice(index + 1, newArr.length);\r\n            let innerExpression = thenClause.concat(newArr.slice(iThen - 1, index));\r\n            innerThenStr = analyzeExpression(innerExpression, undefined, fType, expressionType, onError, true);\r\n\r\n            iThen = 0;\r\n            break;\r\n\r\n        }\r\n    }\r\n    for (iElse = iThen; iElse < expression.length; iElse++) {\r\n        if (expression[iElse].tokenType !== \"if\") {\r\n            elseClause.push(expression[iElse]);\r\n        }\r\n        else if (expression[iElse].tokenType === \"if\") {\r\n            let newArr = expression.slice(iElse, expression.length);\r\n\r\n            expression = newArr.slice(0, newArr.length);\r\n            let innerExpression = elseClause.concat(newArr.slice(iElse - 1, newArr.length));\r\n            innerElseStr = analyzeExpression(innerExpression, undefined, fType, expressionType, onError, true);\r\n\r\n            iElse = 0;\r\n            break;\r\n        }\r\n    }\r\n\r\n    let ifValue: ReturnedEntity | undefined = innerIfStr === undefined ? analyzeExpression(ifClause, undefined, fType, [factoryBaseType(\"Bool\")], onError, false) : innerIfStr;\r\n    let thenValue: ReturnedEntity | undefined = innerThenStr === undefined ? analyzeExpression(thenClause, undefined, fType, expressionType, onError, false) : innerThenStr;\r\n    let elseValue: ReturnedEntity | undefined = innerElseStr === undefined ? analyzeExpression(elseClause, undefined, fType, expressionType, onError, false) : innerElseStr;\r\n\r\n    if (thenValue?.type[0].type !== elseValue?.type[0].type) {\r\n        onError(\"IF-THEN-ELSE syntax error. Expression has one or more errors. One of them - THEN and ELSE branches don't have the same type (#008.6)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    if (isInner) {\r\n        if (isCorrect) {\r\n            return factoryReturnedEntity(`\\\\dfrac{${ifValue?.str} \\\\enspace ${thenValue?.str} \\\\enspace ${elseValue?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(thenValue ? thenValue?.type : [], onError)}} (T-if)`, thenValue ? thenValue?.type : []);\r\n        }\r\n        else {\r\n            return factoryReturnedEntity(red + `\\\\dfrac{${ifValue?.str} \\\\enspace ${thenValue?.str} \\\\enspace ${elseValue?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(thenValue ? thenValue?.type : [], onError)}} (T-if)` + black, thenValue ? thenValue?.type : []);\r\n        }\r\n    }\r\n\r\n    return factoryReturnedEntity(`\\\\dfrac{${ifValue?.str} \\\\enspace ${thenValue?.str} \\\\enspace ${elseValue?.str}}{${getExpressionStringValue(t, undefined)} : ${BaseTypeArrToLatexString(expressionType.length > 0 ? expressionType : thenValue ? thenValue?.type : [], onError)}} (T-if)`, thenValue ? thenValue?.type : []);\r\n}\r\n\r\n// T-F\r\nconst tF = (t1: STLCToken[], expressionType: BaseType[], fType: BaseType[], onError: (message: string) => void): ReturnedEntity => {\r\n    if (t1.length > 1) {\r\n        onError(\"Syntax error. Expression has one or more errors. (#009)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n    if (expressionType.length === 2 && expressionType[0].type === fType[0].type && expressionType[1].type === fType[1].type)\r\n        return factoryReturnedEntity(`\\\\dfrac{${t1[0].tokenType} : ${BaseTypeArrToLatexString(expressionType, onError)} \\\\in \\\\Gamma}{\\\\Gamma \\\\vdash ${t1[0].tokenType} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-var)`, []);\r\n    return factoryReturnedEntity(red + `\\\\dfrac{${t1[0].tokenType} : ${BaseTypeArrToLatexString(expressionType, onError)} \\\\in \\\\Gamma}{\\\\Gamma \\\\vdash ${t1[0].tokenType} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-var)` + black, []);\r\n}\r\n\r\n// T-()\r\nconst tBra = (\r\n    t1: STLCToken[],\r\n    fType: BaseType[] | undefined,\r\n    expressionType: BaseType[],\r\n    onError: (message: string) => void\r\n\r\n): ReturnedEntity => {\r\n\r\n    if (t1.length < 3) {\r\n        onError(\"T-() syntax error (#010.1)\");\r\n        return factoryReturnedEntity(\" \", []);\r\n    }\r\n\r\n    let arr = t1.slice();\r\n\r\n    let left: number | undefined;\r\n    let right: number | undefined;\r\n\r\n    switch (bracketsChecker(arr)) {\r\n        case 0:\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i].tokenType === \"(\") {\r\n                    left = i;\r\n                    break;\r\n                }\r\n            }\r\n            for (let i = arr.length - 1; i > 0; i--) {\r\n                if (arr[i].tokenType === \")\") {\r\n                    right = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (left !== undefined && right !== undefined) {\r\n                arr.splice(left, 1);\r\n                arr.splice(right - 1, 1);\r\n            }\r\n\r\n            let result = analyzeExpression(arr, undefined, fType, expressionType, onError, false);\r\n\r\n            if (expressionType.length > 0)\r\n                return factoryReturnedEntity(`\\\\dfrac{${result ? result.str : \"\"}}{${getExpressionStringValue(t1, undefined)} : ${BaseTypeArrToLatexString(expressionType, onError)}} (T-())`, expressionType);\r\n            else\r\n                return factoryReturnedEntity(`\\\\dfrac{${result ? result.str : \"\"}}{${getExpressionStringValue(t1, undefined)} : ${result ? BaseTypeArrToLatexString(result ? result.type : [], onError) : \"UNDEFINED TYPE\"}} (T-())`, result ? result.type : []);\r\n\r\n        case 1:\r\n        default:\r\n            onError(\"T-() syntax error (#010.2)\");\r\n            return factoryReturnedEntity(\" \", []);\r\n    }\r\n}\r\n\r\nconst getExpressionStringValue = (t1: STLCToken[], t2: STLCToken[] | undefined): string => {\r\n\r\n    let arrays = t2 ? t1.concat(t2) : t1.slice();\r\n    let arrayOfVars: STLCToken[] = [];\r\n\r\n    let part1 = \" \\\\Gamma\" + VDASH;\r\n    let part2 = \"\";\r\n\r\n    arrays.forEach(elem => {\r\n        if (elem.tokenType === \"var\" && !elem.varAbstracted && elem.varName && elem.varType && !arrayOfVars.find(e => e.varName === elem.varName))\r\n        {\r\n            part1 += ` \\\\lambda ${elem.varName}:${elem.varType}. `;\r\n            arrayOfVars.push(elem);\r\n        }\r\n    });\r\n\r\n    arrays.forEach(elem => {\r\n        if (elem.tokenType === \"var\")\r\n            part2 += \" \\\\enspace \" + elem.varName;\r\n        else\r\n            part2 += \" \\\\enspace \" + elem.tokenType;\r\n    });\r\n\r\n    let res = part1 + part2;\r\n\r\n    return res;\r\n}\r\n\r\nconst findFirstUnAbsVar = (t: STLCToken[]): STLCToken | undefined => {\r\n    return t.find(elem => elem.tokenType === \"var\" && elem.varAbstracted === false);\r\n}\r\n\r\nconst absAllVars = (t: STLCToken[], token: STLCToken, expressionType: BaseType[]): void => {\r\n    t.forEach(elem => {\r\n        if (elem.tokenType === \"var\" && elem.varName === token.varName) {\r\n            elem.varAbstracted = true;\r\n            elem.gammaType = expressionType[0].type;\r\n        }\r\n    });\r\n}\r\n\r\nconst isTAbsRule = (t: STLCToken[]): boolean => {\r\n    let lbPosition = 0;\r\n\r\n    t.forEach((elem, index) => {\r\n        if (elem.tokenType === \"(\") {\r\n            lbPosition = index;\r\n            return;\r\n        }\r\n    });\r\n\r\n    for (let i = lbPosition; i < t.length; i++) {\r\n        if (t[i].tokenType === \"var\" && !t[i].varAbstracted)\r\n            return true;\r\n    }\r\n\r\n    return false;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport 'katex/dist/katex.min.css';\r\n// @ts-ignore\r\nimport { InlineMath, BlockMath } from 'react-katex';\r\nimport { PageProps } from '../VisualComponents/Props';\r\nimport { Button, ButtonGroup, FormControl, InputLabel, MenuItem, Select, TextField } from '@material-ui/core';\r\nimport { factoryBaseType, BaseType, BaseTypeArrToLatexString } from '../Entity/BaseType';\r\nimport STLCKeyboard from '../VisualComponents/STLCKeyboard';\r\nimport { Named, toNamed } from '../Entity/Named';\r\nimport { analyzeExpression } from '../EvRules/STLCEvRules';\r\nimport { factorySTLCToken, STLCToken } from '../Entity/STLCToken';\r\nimport { getNextVar } from '../Utils/Utils';\r\nimport \"../Styles/Styles.css\";\r\n\r\n/**\r\n * Graphical user interface component that represents STLC page.\r\n * \r\n * @properties `props`- properties of `PageProps`.\r\n *\r\n * @returns `JSX.Element` that represents common page.\r\n */\r\nconst STLCPage: React.FC<PageProps> = props => {\r\n\r\n    const { infoHandler, errorHandler, errorMessages } = props;\r\n\r\n    const [expression, setExpression] = useState<STLCToken[]>([]);\r\n\r\n    const [evaluatedExpression, setEvaluatedExpression] = useState<string>(\" \");\r\n\r\n    const [formula, setFormula] = useState<string>();\r\n\r\n    const [fType, setFType] = useState<Named<BaseType[]>>();\r\n    const [exprType, setExprType] = useState<BaseType[]>();\r\n\r\n    const [t1, setT1] = useState<STLCToken[]>([]);\r\n    const [t2, setT2] = useState<STLCToken[]>([]);\r\n    const [vars, setVars] = useState<STLCToken[]>([]);\r\n\r\n    const [fCmbEnabled, setFCmdEnabled] = useState<boolean>(false);\r\n\r\n    const [fOtions] = useState<Named<BaseType[]>[]>([\r\n        toNamed(0, [factoryBaseType(\"Nat\"), factoryBaseType(\"Bool\")]),\r\n        toNamed(1, [factoryBaseType(\"Nat\"), factoryBaseType(\"Nat\")]),\r\n        toNamed(2, [factoryBaseType(\"Bool\"), factoryBaseType(\"Nat\")]),\r\n        toNamed(3, [factoryBaseType(\"Bool\"), factoryBaseType(\"Bool\")])]);\r\n\r\n    const [typeOtions] = useState<Named<BaseType[]>[]>([\r\n        toNamed(0, [factoryBaseType(\"Nat\")]),\r\n        toNamed(1, [factoryBaseType(\"Bool\")])]);\r\n\r\n    // eslint-disable-next-line\r\n    const [varGenerator, setVarGenerator] = useState<Generator<string, void, unknown>>(getNextVar()); \r\n\r\n\r\n    useEffect(() => {\r\n        if (t2.length > 0)\r\n            setExpression(t1.concat(t2).slice());\r\n        else\r\n            setExpression(t1.slice());\r\n    }, [t1, t2]);\r\n\r\n    useEffect(() => {\r\n        if (expression.find(elem => elem.tokenType === \"f\"))\r\n            setFCmdEnabled(true);\r\n        else\r\n            setFCmdEnabled(false);\r\n    }, [expression]);\r\n\r\n    useEffect(() => {\r\n        setFormula(\"\");\r\n    }, [errorMessages]);\r\n\r\n    const clearData = (): void => {\r\n        setExpression([]);\r\n        setEvaluatedExpression(\" \");\r\n        setT1([]);\r\n        setT2([]);\r\n        setVars([]);\r\n        setFormula(undefined);\r\n        setFType(undefined);\r\n        setExprType(undefined);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\"Expression:\"}\r\n            <div style={{ height: '20px' }}>\r\n            </div>\r\n\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                <FormControl variant=\"outlined\">\r\n                    <InputLabel htmlFor=\"outlined-age-native-simple\"><InlineMath math=\"f: type \\to type \" /></InputLabel>\r\n                    <Select\r\n                        disabled={!fCmbEnabled}\r\n                        style={{ minWidth: '150px' }}\r\n                        labelId=\"demo-simple-select-outlined-label\"\r\n                        id=\"varType\"\r\n                        value={fType ? fType.id : \"\"}\r\n                        onChange={(event) => {\r\n                            setFType(fOtions.find(elem => elem.id === event.target.value));\r\n                            setFormula(undefined);\r\n                        }}\r\n                    >\r\n                        {fOtions.map((e) => (\r\n                            <MenuItem\r\n                                value={e.id}\r\n                                key={e.id}\r\n                            >\r\n                                <InlineMath math={\"f: \" + BaseTypeArrToLatexString(e.type, errorHandler)} />\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <TextField disabled style={{ width: '36px' }} id=\"outlined-basic\" variant=\"outlined\"\r\n                    label={<InlineMath math={\"\\\\vdash\"} />} />\r\n\r\n                <TextField disabled style={{ width: '650px' }} id=\"outlined-basic\" variant=\"outlined\"\r\n                    label={<InlineMath math={getExpressionStringValue(expression, vars)} />}\r\n                />\r\n\r\n                {/* Expression type */}\r\n                {exprTypeBuilder(exprType, setExprType, setFormula, typeOtions, errorHandler)}\r\n\r\n            </div>\r\n            <div style={{ height: '20px' }}>\r\n            </div>\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                <STLCKeyboard\r\n                    title={\"t1\"}\r\n                    setT={setT1}\r\n                    enabled={true}\r\n                    setVars={setVars}\r\n                    setFormula={setFormula}\r\n                    varGenerator={varGenerator}\r\n                />\r\n                <STLCKeyboard\r\n                    title={\"t2\"}\r\n                    setT={setT2}\r\n                    enabled={t1.find(elem => elem.tokenType === \"f\") ? true : false }\r\n                    setVars={setVars}\r\n                    setFormula={setFormula}\r\n                    varGenerator={varGenerator}\r\n                    vars={vars}\r\n                />\r\n            </div>\r\n            <div style={{ height: '20px' }}>\r\n            </div>\r\n            <div>\r\n                <ButtonGroup color=\"secondary\" aria-label=\"outlined primary button group\">\r\n                    <Button style={{ width: '110px' }} onClick={() => {\r\n                        clearData();\r\n                    }}>{\"CLEAR\"}</Button>\r\n                </ButtonGroup>\r\n                {\" \"}\r\n                <ButtonGroup color=\"secondary\" aria-label=\"outlined primary button group\">\r\n                    <Button\r\n                        disabled={isAnalizeBtnDisabled(t1, t2, fType, exprType)}\r\n                        style={{ width: '110px' }}\r\n                        onClick={() => {\r\n\r\n                            if (exprType) {\r\n                                setFormula(analyzeExpression(copyArrayOfTokens(t1), copyArrayOfTokens(t2), fType?.type, exprType, errorHandler, false)?.str);\r\n                                infoHandler(\"Expression was analyzed.\");\r\n                            }\r\n                            else\r\n                                errorHandler(\"Please select expression type.\");\r\n                        }}>{\"ANALIZE\"}</Button>\r\n                </ButtonGroup>\r\n                {\" \"}\r\n                <ButtonGroup color=\"secondary\" aria-label=\"outlined primary button group\">\r\n                    <Button\r\n                        disabled={!formula || formula.length === 0}\r\n                        style={{ width: '110px' }}\r\n                        onClick={() => { if (formula) setEvaluatedExpression(formula); }}>\r\n                        {\"DRAW\"}\r\n                    </Button>\r\n                </ButtonGroup>\r\n\r\n            </div >\r\n\r\n            <div style={{ height: '20px' }}>{ }</div>\r\n            <BlockMath\r\n                math={evaluatedExpression}\r\n                errorColor={'#cc0000'}\r\n                renderError={(error: any) => {\r\n                    return <b>{`Fail: ${error.name}`}</b>\r\n                }}\r\n                className=\"katex\"\r\n            />\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default STLCPage;\r\n\r\n\r\nconst getExpressionStringValue = (expression: STLCToken[], vars: STLCToken[]): string => {\r\n\r\n    let expressionCopy = expression.slice();\r\n\r\n    let res = \" \";\r\n\r\n    if (vars.length > 0) {\r\n\r\n        res += vars.map(elem => `\\\\lambda ${elem.varName}:${elem.varType}.`).join(\"\");\r\n    }\r\n\r\n    res += expressionCopy.map(elem => {\r\n        if (elem.tokenType === 'var')\r\n            return elem.varName;\r\n        return elem.tokenType;\r\n    }).join(\" \\\\enspace \");\r\n\r\n    return res;\r\n}\r\n\r\nconst isAnalizeBtnDisabled = (\r\n    t1: STLCToken[],\r\n    t2: STLCToken[],\r\n    fType: Named<BaseType[]> | undefined,\r\n    exprType: BaseType[] | undefined\r\n): boolean => {\r\n    if (exprType && t1.length > 0 && exprType.length > 0) {\r\n        if (t1.find(elem => elem.tokenType === \"f\") || t2.find(elem => elem.tokenType === \"f\")) {\r\n            if (fType)\r\n                return false;\r\n            else\r\n                return true;\r\n        }\r\n        else return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst exprTypeBuilder = (\r\n    exprType: BaseType[] | undefined,\r\n    setExprType: React.Dispatch<React.SetStateAction<BaseType[] | undefined>>,\r\n    setFormula: (value: React.SetStateAction<string | undefined>) => void,\r\n    typeOtions: Named<BaseType[]>[],\r\n    onError: (message: string) => void\r\n): JSX.Element => {\r\n\r\n    let type = \":\" + (exprType !== undefined ? BaseTypeArrToLatexString(exprType, onError) : \"\");\r\n\r\n    return (\r\n        <div>\r\n            <TextField disabled style={{ width: '300px' }} id=\"outlined-basic\" variant=\"outlined\"\r\n                label={<InlineMath math={type} />}\r\n            />\r\n            <FormControl variant=\"outlined\">\r\n\r\n                <InputLabel htmlFor=\"outlined-age-native-simple\"><InlineMath math=\"add\" /></InputLabel>\r\n                <Select\r\n                    style={{ minWidth: '80px' }}\r\n                    labelId=\"demo-simple-select-outlined-label\"\r\n                    id=\"varType\"\r\n                    value={\"\"}\r\n                    onChange={(event) => {\r\n                        let newValue = typeOtions.find(elem => elem.id === event.target.value)?.type;\r\n                        if (exprType && newValue)\r\n                            setExprType([...exprType, ...newValue]);\r\n                        else if (newValue)\r\n                            setExprType([...newValue]);\r\n\r\n                        setFormula(undefined);\r\n                    }}\r\n                >\r\n                    {typeOtions.map((e) => (\r\n                        <MenuItem\r\n                            value={e.id}\r\n                            key={e.id}\r\n                        >\r\n                            <InlineMath math={\":\" + BaseTypeArrToLatexString(e.type, onError)} />\r\n                        </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst copyArrayOfTokens = (arr: STLCToken[]): STLCToken[] => {\r\n    return arr.map(elem => { return factorySTLCToken(elem.tokenType, elem.varName, elem.varType, elem.varAbstracted) });\r\n}","import React, { useState, useCallback } from 'react';\r\nimport { useStyles } from '../Styles/Styles';\r\nimport { AppBar, Toolbar, Grid, Button, Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText } from '@material-ui/core';\r\nimport 'katex/dist/katex.min.css';\r\nimport CommonPage from './CommonPage';\r\nimport STLCPage from './STLCPage';\r\n\r\n/**\r\n * Graphical user interface component that contains application bar for navigation and displays selected view.\r\n * \r\n * @param props - object of properties.\r\n * \r\n * @returns `JSX.Element` that represents main page of application.\r\n */\r\nconst MainPage: React.FC = props => {\r\n    const classes = useStyles();\r\n\r\n    const [infoMessages, setInfoMessages] = useState<string[]>([]);\r\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\r\n\r\n    const infoHandler = useCallback((message: string) => {\r\n        setInfoMessages((prevState) => [message, ...prevState]);\r\n    }, []);\r\n\r\n    const errorHandler = useCallback((message: string) => {\r\n        setErrorMessages((prevState) => [message, ...prevState]);\r\n    }, []);\r\n\r\n    const handleCloseInfo = useCallback(() => setInfoMessages([]), []);\r\n    const handleCloseError = useCallback(() => {\r\n        setErrorMessages([]);\r\n        setInfoMessages([]);\r\n    }, []);\r\n\r\n    const [view, setView] = useState<string>(\"STLC 1\");\r\n\r\n    const handleChangeView = (value: string): void => {\r\n        setView(value);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Grid container direction=\"row\" spacing={2} justify=\"center\" alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Button variant=\"contained\" className={view === \"STLC 1\" ? classes.menuButtonSelected : classes.menuButton}\r\n                                    onClick={() => { handleChangeView(\"STLC 1\") }}>\r\n                                    {\"STLC 1\"}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button variant=\"contained\" className={view === \"STLC 2\" ? classes.menuButtonSelected : classes.menuButton}\r\n                                    onClick={() => { handleChangeView(\"STLC 2\") }}>\r\n                                    {\"STLC 2\"}</Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button variant=\"contained\" className={view === \"T-NBL\" ? classes.menuButtonSelected : classes.menuButton}\r\n                                    onClick={() => { handleChangeView(\"T-NBL\") }}>\r\n                                    {\"T-NBL\"}</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n\r\n            <br />\r\n            <br />\r\n\r\n            <div className=\"App\">\r\n                {getView(view, infoHandler, errorHandler, errorMessages)}\r\n\r\n                <Dialog\r\n                    open={errorMessages.length > 0}\r\n                    onClose={handleCloseError}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"Error\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            {errorMessages.map((e) => (\r\n                                <div key={e}>{e}</div>\r\n                            ))}\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleCloseError} color=\"primary\">\r\n                            {\"Close\"}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <Dialog\r\n                    open={errorMessages.length === 0 && infoMessages.length > 0}\r\n                    onClose={() => { }}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{\"Info\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            {infoMessages.map((e) => (\r\n                                <div key={e}>{e}</div>\r\n                            ))}\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleCloseInfo} color=\"primary\">\r\n                            {\"Close\"}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div >\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n\r\nconst getView = (\r\n    view: string,\r\n    infoHandler: (message: string) => void,\r\n    errorHandler: (message: string) => void,\r\n    errorMessages?: string[]\r\n): JSX.Element => {\r\n\r\n    switch (view) {\r\n        case \"T-NBL\":\r\n            return <CommonPage\r\n                infoHandler={infoHandler}\r\n                errorHandler={errorHandler}\r\n                isTNBL={true}\r\n            />\r\n        case \"STLC 2\":\r\n            return <CommonPage\r\n                infoHandler={infoHandler}\r\n                errorHandler={errorHandler}\r\n                isTNBL={false}\r\n            />\r\n        case \"STLC 1\":\r\n        default:\r\n            return <STLCPage\r\n                infoHandler={infoHandler}\r\n                errorHandler={errorHandler}\r\n                errorMessages={errorMessages}\r\n            />\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport MainPage from './Pages/MainPage';\r\n\r\n/**\r\n * Function that provides main page of application.\r\n *\r\n * @returns `JSX.Element` of `MainPage`.\r\n */\r\nfunction App() {\r\n  return (\r\n    <MainPage />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/**\n * Function that provides render of application. Start point.\n */\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}